package com.ifountain.domain

import groovy.text.SimpleTemplateEngine
import java.util.regex.Pattern

/* All content copyright (C) 2004-2008 iFountain, LLC., except as may otherwise be
* noted in a separate copyright notice. All rights reserved.
* This file is part of RapidCMDB.
*
* RapidCMDB is free software; you can redistribute it and/or modify
* it under the terms version 2 of the GNU General Public License as
* published by the Free Software Foundation. This program is distributed
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
* even the implied warranty of MERCHANTABILITY or FITNESS FOR A
* PARTICULAR PURPOSE. See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
* USA.
*/
/**
 * Created by IntelliJ IDEA.
 * User: mustafa
 * Date: Mar 22, 2008
 * Time: 1:44:10 AM
 * To change this template use File | Settings | File Templates.
 */
class DomainGenerator {
    static final String classLinePattern = "\\s*(public|private|protected|)\\s*class\\s+\\S+\\s*(extends\\s+\\S+)*.*";
    static final String classDefinitionReplacementPattern = "\\s*(public|private|protected|)\\s*class\\s+\\S+\\s*(extends\\s+\\S+)*";
    static final String AUTO_GENERATED_CODE_COMMENT = "//AUTO_GENERATED_CODE";
    static final File wholeClasstemplateFile = new File("./grails-app/templates/DomainClassTemplate.txt");
    static final File emptyClasstemplateFile = new File("./grails-app/templates/EmptyDomainClassTemplate.txt");
    static final File autoGeneratedCodeTemplateFile = new File("./grails-app/templates/AutoGeneratedCodeTemplate.txt");
    static final File controllerTemplateFile = new File("./grails-app/templates/ControllerTemplate.txt");
    private static   DomainGenerator generator;
    def engine;
    def wholeClassTemplate;
    def emptyClassTemplate;
    def autoGeneratedCodeTemplate;
    def controllerTemplate;
    private DomainGenerator()
    {
        engine = new SimpleTemplateEngine();
        wholeClassTemplate = engine.createTemplate(wholeClasstemplateFile);
        emptyClassTemplate = engine.createTemplate(emptyClasstemplateFile);
        autoGeneratedCodeTemplate = engine.createTemplate(autoGeneratedCodeTemplateFile);
        controllerTemplate = engine.createTemplate(controllerTemplateFile);
    }
    def generateEmptyModel(model)
    {
         if(!model.isGenerated())
         {
             def bindings = ["model":model];
             model.getModelFile().withWriter { w ->
                emptyClassTemplate.make(bindings).writeTo(w);
             }
         }
    }

    def generateController(model)
    {
         if(!model.isControllerGenerated())
         {
             def bindings = ["model":model];
             model.getControllerFile().withWriter { w ->
                controllerTemplate.make(bindings).writeTo(w);
             }
         }
    }
    def generateModel(model)
    {
         generateModel (model,[:])
    }
    def generateModel(model, generatedModels)
    {
        if(generatedModels.containsKey(model.name))
        {
            return;            
        }
        if(model.parentModel)
        {
            generateEmptyModel (model.parentModel);
        }
        model.relations?.each
        {
            generateEmptyModel (it.toModel);
        }

        generateController(model);
        def bindings = ["model":model];
        def autoGeneratedCode = autoGeneratedCodeTemplate.make(bindings).toString();
        if(!model.isGenerated())
        {
            bindings["AUTO_GENERATED_CODE"] = autoGeneratedCode;
            model.getModelFile().withWriter { w ->
                def x = wholeClassTemplate.make(bindings);
                println x;
                x.writeTo(w);
            }
        }
        else
        {
            def modelFile = model.getModelFile();
            def newClassFileBeforeClassDefinition = new StringBuffer();
            def newClassFileafterClassDefinition = new StringBuffer();
            int classParts = 0;
            modelFile.eachLine {
                if(classParts == 0 && it.matches(classLinePattern))
                {
                    classParts++;
                    def classDefinition = "class $model.name";
                    if(model.parentModel)
                    {
                        classDefinition += " extends $model.parentModel.name"
                    }
                    classDefinition += it.replaceAll(classDefinitionReplacementPattern, " ");
                    if(it.trim().endsWith("{"))
                    {
                        classDefinition += "{";
                        classParts++;
                    }

                    newClassFileBeforeClassDefinition.append(classDefinition + "\n");
                }
                else if(classParts == 1)
                {

                    if(it.trim().startsWith("{"))
                    {
                        classParts++;
                    }
                    newClassFileBeforeClassDefinition.append(it + "\n");
                }
                else if(classParts == 2 && it.indexOf(AUTO_GENERATED_CODE_COMMENT) > 0)
                {
                    classParts++;
                }
                else if(classParts == 3 && it.indexOf(AUTO_GENERATED_CODE_COMMENT) > 0)
                {
                    classParts ++;
                }
                else
                {
                    if(classParts == 0)
                    {
                        newClassFileBeforeClassDefinition.append(it+ "\n");
                    }
                    else if(classParts > 3 || classParts == 2)
                    {
                        newClassFileafterClassDefinition.append(it+ "\n");   
                    }
                }
            }
            modelFile.setText(newClassFileBeforeClassDefinition.toString() + "\n" + autoGeneratedCode + "\n"+newClassFileafterClassDefinition);
        }

        generatedModels[model.name] = model;
        if(model.parentModel)
        {
            generateModel (model.parentModel, generatedModels);
        }
        model.relations?.each
        {
            generateModel (it.toModel, generatedModels);
        }
    }


    def static getInstance()
    {
        if(!generator)
        {
            generator = new DomainGenerator();
        }
        return generator;
    }
}