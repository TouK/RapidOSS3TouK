package com.ifountain.domain

import model.Model
import org.apache.commons.io.FileUtils
import groovy.text.SimpleTemplateEngine

class ModelGenerator
{
    private static ModelGenerator generator;
    static final String BASE_DIRECTORY = System.getProperty("base.dir", ".");
    static final String classLinePattern = "\\s*(public|private|protected|)\\s*class\\s+\\S+\\s*(extends\\s+\\S+)*.*";
    static final String classDefinitionReplacementPattern = "\\s*(public|private|protected|)\\s*class\\s+\\S+\\s*(extends\\s+\\S+)*[^{]";
    static final String AUTO_GENERATED_CODE_COMMENT = "//AUTO_GENERATED_CODE";
    static final File wholeClasstemplateFile = new File("$BASE_DIRECTORY/grails-app/templates/DomainClassTemplate.txt");
    static final File emptyClasstemplateFile = new File("$BASE_DIRECTORY/grails-app/templates/EmptyDomainClassTemplate.txt");
    static final File autoGeneratedCodeTemplateFile = new File("$BASE_DIRECTORY/grails-app/templates/AutoGeneratedCodeTemplate.txt");
    static final File controllerTemplateFile = new File("$BASE_DIRECTORY/grails-app/templates/ControllerTemplate.txt");

    def engine;
    def wholeClassTemplate;
    def emptyClassTemplate;
    def autoGeneratedCodeTemplate;
    def controllerTemplate;
    private ModelGenerator()
    {
        engine = new SimpleTemplateEngine();
        wholeClassTemplate = engine.createTemplate(wholeClasstemplateFile);
        emptyClassTemplate = engine.createTemplate(emptyClasstemplateFile);
        autoGeneratedCodeTemplate = engine.createTemplate(autoGeneratedCodeTemplateFile);
        controllerTemplate = engine.createTemplate(controllerTemplateFile);
    }

    public static ModelGenerator getInstance()
    {
        if(!generator)
        {
            generator = new ModelGenerator();
        }
        return generator;
    }

    private def generateController(model)
    {
         if(!model.isControllerGenerated())
         {
             def bindings = ["model":model];
             model.getControllerFile().withWriter { w ->
                controllerTemplate.make(bindings).writeTo(w);
             }
         }
    }

    private def getDependentModels(model)
    {
        def dependentModels = [:]
        if(model.parentModel)
        {
            dependentModels[model.parentModel.name] = model.parentModel;
        }
        model.fromRelations.each
        {
            dependentModels[it.toModel.name] = it.toModel;
        }
        model.toRelations.each
        {
            dependentModels[it.fromModel.name] = it.fromModel;
        }
        return dependentModels.values();
    }

    private def createEmptyDependentClasses(model)
    {
        def modelsNeedsToBeCreated = [:]
        if(model.parentModel)
        {
            modelsNeedToBeCreated[]
            generateEmptyModel (model.parentModel);
        }
        model.fromRelations
    }

    private def generateEmptyModel(model)
    {
         if(!model.isGenerated())
         {
             def bindings = ["model":model];
             model.getModelFile().withWriter { w ->
                emptyClassTemplate.make(bindings).writeTo(w);
             }
         }
    }
    def generateModel(Model model)
    {
        def generatedModels = [:];
        generateModel (model, generatedModels);
    }

    def generateModel(Model model, Map generatedModels)
    {
        if(generatedModels.containsKey(model.name)) return;
        generatedModels[model.name] = model;
        def dependentModels = getDependentModels(model);
        def parentDir = model.getModelFile().getParentFile();
        parentDir.mkdirs();
        dependentModels.each
        {
            generateEmptyModel(it);
        }
        def bindings = ["model":model];
        def autoGeneratedCode = autoGeneratedCodeTemplate.make(bindings).toString();
        
        if(!model.isGenerated())
        {
            bindings["AUTO_GENERATED_CODE"] = autoGeneratedCode;
            model.getModelFile().withWriter { w ->
                def x = wholeClassTemplate.make(bindings);
                println x;
                x.writeTo(w);
            }
        }
        else
        {
            def modelFile = model.getModelFile();
            def newClassFileBeforeClassDefinition = new StringBuffer();
            def newClassFileafterClassDefinition = new StringBuffer();
            int classParts = 0;
            modelFile.eachLine {
                if(classParts == 0 && it.matches(classLinePattern))
                {
                    classParts++;
                    def classDefinition = "class $model.name";
                    if(model.parentModel)
                    {
                        classDefinition += " extends $model.parentModel.name"
                    }
                    classDefinition += it.replaceAll(classDefinitionReplacementPattern, " ");
                    newClassFileBeforeClassDefinition.append(classDefinition + "\n");
                    if(it.trim().endsWith("{"))
                    {
                        classParts++;
                    }
                }
                else if(classParts == 1)
                {
                    newClassFileBeforeClassDefinition.append(it + "\n");
                    if(it.trim().endsWith("{"))
                    {
                        classParts++;
                    }
                }
                else if(classParts == 2 && it.indexOf(AUTO_GENERATED_CODE_COMMENT) > 0)
                {
                    classParts++;
                }
                else if(classParts == 3 && it.indexOf(AUTO_GENERATED_CODE_COMMENT) > 0)
                {
                    classParts ++;
                }
                else
                {
                    if(classParts == 0)
                    {
                        newClassFileBeforeClassDefinition.append(it+ "\n");
                    }
                    else if(classParts >3 || classParts == 2 || classParts == 1)
                    {
                        newClassFileafterClassDefinition.append(it+ "\n");
                    }
                }
            }
            modelFile.setText(newClassFileBeforeClassDefinition.toString() + "\n" + autoGeneratedCode + "\n"+newClassFileafterClassDefinition);
        }
        generateController(model);
        dependentModels.each {
            generateModel (it, generatedModels);
        }
    }
}