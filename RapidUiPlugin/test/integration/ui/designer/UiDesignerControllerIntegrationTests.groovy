package ui.designer

import com.ifountain.rcmdb.test.util.RapidCmdbIntegrationTestCase
import org.apache.commons.lang.StringUtils
import org.codehaus.groovy.grails.commons.ApplicationHolder
import groovy.xml.MarkupBuilder
import com.ifountain.rcmdb.test.util.IntegrationTestUtils
import org.apache.commons.io.FileUtils
import groovy.util.slurpersupport.GPathResult

/**
* Created by IntelliJ IDEA.
* User: admin
* Date: Jan 27, 2009
* Time: 3:27:15 PM
* To change this template use File | Settings | File Templates.
*/
class UiDesignerControllerIntegrationTests extends RapidCmdbIntegrationTestCase {

    public void setUp() {
        super.setUp(); //To change body of overridden methods use File | Settings | File Templates.
        def uiDomainClasses = ApplicationHolder.application.getDomainClasses().findAll {
            if (it.clazz.name.startsWith(UiWebPage.getPackage().name))
            {
                it.clazz.'removeAll'();
            }
        }
        DesignerTrashFile.removeAll();
    }

    public void tearDown() {
        super.tearDown(); //To change body of overridden methods use File | Settings | File Templates.
        def uiDomainClasses = ApplicationHolder.application.getDomainClasses().findAll {
            if (it.clazz.name.startsWith(UiWebPage.getPackage().name))
            {
                it.clazz.'removeAll'();
            }
        }
    }

    public void testSaveViewAndGenerate()
    {
        new File("${System.getProperty("base.dir")}/web-app/x.gsp").setText("");
        new File("${System.getProperty("base.dir")}/web-app/y.gsp").setText("");
        def sw = new StringWriter();
        def builder = new MarkupBuilder(sw);
        def url1Props = [name: "myUrl1", designerType: "WebPage", id: ""]
        def url2Props = [name: "myUrl2", designerType: "WebPage", id: ""]
        def tabsProps = [[name: "tab1", designerType: "Tab", contentFile: 'x.gsp', title: "tab1", id: ""], [name: "tab2", designerType: "Tab", contentFile: 'y.gsp', title: "tab2", id: ""]];
        builder.UiConfig {
            builder.UiElement(designerType: "WebPages", id: "") {
                builder.UiElement(url1Props) {
                    builder.UiElement(designerType: "Tabs", id: "") {
                        tabsProps.each {tab ->
                            builder.UiElement(tab) {
                                builder.UiElement(designerType: 'Layout', id: "")
                                builder.UiElement(designerType: 'Components', id: "")
                                builder.UiElement(designerType: 'Dialogs', id: "")
                                builder.UiElement(designerType: 'Actions', id: "")
                            }
                        }
                    }
                }
                builder.UiElement(url2Props) {
                    builder.UiElement(designerType: "Tabs", id: "") {
                        tabsProps.each {tab ->
                            builder.UiElement(tab) {
                                builder.UiElement(designerType: 'Layout', id: "")
                                builder.UiElement(designerType: 'Components', id: "")
                                builder.UiElement(designerType: 'Dialogs', id: "")
                                builder.UiElement(designerType: 'Actions', id: "")
                            }
                        }
                    }
                }
            }
        }
        UiDesignerController controller = new UiDesignerController();
        controller.params.configuration = sw.toString()
        controller.save();
        def url1 = UiWebPage.get(name: url1Props.name, isActive: true);
        def url2 = UiWebPage.get(name: url2Props.name, isActive: true);
        assertTrue(!url1.tabs.findAll {it.name == "tab1"}.isEmpty());
        assertTrue(!url1.tabs.findAll {it.name == "tab2"}.isEmpty());
        assertTrue(!url2.tabs.findAll {it.name == "tab1"}.isEmpty());
        assertTrue(!url2.tabs.findAll {it.name == "tab2"}.isEmpty());
        assertEqualsXML("<Successful>UI configuration saved successfully</Successful>", controller.response.contentAsString);

        //test view
        IntegrationTestUtils.resetController(controller);
        controller.view();
        println sw.toString()
        println controller.response.contentAsString
        assertEqualsXML(sw.toString(), controller.response.contentAsString, ["id"]);

        //check id property is added to groupping metadata configuration
        def node = new XmlSlurper().parseText(controller.response.contentAsString);
        assertEquals("autoGenerated0", node.UiElement.@id.text());
        def webPageNode = node.UiElement.UiElement.find {it.@name.text() == url1.name};
        def tabsNode = webPageNode.UiElement
        def tabNode = tabsNode.UiElement[0];
        def componentsNode = tabNode.UiElement.find {it.@designerType.text() == "Components"}
        def dialogsNode = tabNode.UiElement.find {it.@designerType.text() == "Dialogs"}
        def actionsNode = tabNode.UiElement.find {it.@designerType.text() == "Actions"}
        assertEquals("autoGenerated1", tabsNode.@id.text());
        assertEquals("autoGenerated2", componentsNode.@id.text());
        assertEquals("autoGenerated3", dialogsNode.@id.text());
        assertEquals("autoGenerated4", actionsNode.@id.text());

        //test generate gsp files 
        deleteGeneratedFiles();
        IntegrationTestUtils.resetController(controller);
        controller.generate();
        assertEqualsXML("<Successful>UI generated successfully</Successful>", controller.response.contentAsString);
        checkGeneratedFiles();

        def tabsOfUrl1BeforeDelete = url1.tabs;
        def tabsOfUrl2BeforeDelete = url2.tabs;
        //test deletes old models
        sw = new StringWriter();
        builder = new MarkupBuilder(sw);
        builder.UiConfig {
            builder.UiElement(designerType: "WebPages") {
                builder.UiElement(url1Props) {
                    builder.UiElement(designerType: "Tabs", id: "")
                            {
                                builder.UiElement(tabsProps[0]) {
                                    builder.UiElement(designerType: "Layout");
                                }
                            }
                }
            }
        }
        IntegrationTestUtils.resetController(controller);
        controller.params.configuration = sw.toString()
        controller.save();
        assertEqualsXML("<Successful>UI configuration saved successfully</Successful>", controller.response.contentAsString);

        //for deleted webpage and tab file trash files should be added to repository
        def filesWillBeSavedToTrashList = ["grails-app/views/layouts/${url1Props.name}Layout.gsp",
                "web-app/${url1Props.name}.gsp",
                "grails-app/views/layouts/${url2Props.name}Layout.gsp",
                "web-app/${url2Props.name}.gsp",
                "web-app/${url2Props.name}/${tabsProps[0].name}.gsp",
                "web-app/${url2Props.name}/${tabsProps[1].name}.gsp",
                "web-app/${url2Props.name}/${tabsProps[1].name}.gsp",
                "web-app/${url1Props.name}/${tabsProps[1].name}.gsp",
                "grails-app/views/layouts/${url1Props.name}Layout.gsp",
                "web-app/${url1Props.name}.gsp",
                "grails-app/views/layouts/${url2Props.name}Layout.gsp",
                "web-app/${url2Props.name}.gsp",
                "web-app/${url2Props.name}/${tabsProps[0].name}.gsp",
                "web-app/${url2Props.name}/${tabsProps[1].name}.gsp",
                "web-app/${url2Props.name}/${tabsProps[1].name}.gsp",
                "web-app/${url1Props.name}/${tabsProps[1].name}.gsp"
        ];
        
        filesWillBeSavedToTrashList.each{fileName->
            assertNotNull(DesignerTrashFile.searchEvery("fileName:${fileName.exactQuery()}")[0])
            assertTrue (new File("${System.getProperty("base.dir")}/${fileName}").exists());
        }
        def urlsAfterReSave = UiWebPage.list();
        def tabsAfterReSave = UiTab.list();
        assertEquals(1, urlsAfterReSave.size())
        assertEquals(1, tabsAfterReSave.size())
        assertEquals(url1Props.name, urlsAfterReSave[0].name)
        assertEquals(tabsProps[0].name, tabsAfterReSave[0].name)

        def baseDir = System.getProperty("base.dir");

        IntegrationTestUtils.resetController(controller);
        controller.generate();

        //test will delete delete files belonging to deleted webpage and tab
        def url2LayoutFile = new File(baseDir + "/${url2.getUrlLayoutFilePath()}");
        assertFalse(url2LayoutFile.exists());
        assertFalse(new File(baseDir + "/${url2.getUrlFilePath()}").exists());
        assertFalse(new File(baseDir + "/${url2.getUrlDirectory()}").exists());
        assertTrue(new File(baseDir + "/${url1.getUrlFilePath()}").exists());
        assertTrue(new File(baseDir + "/${url1.getUrlDirectory()}").exists());
        assertTrue(new File(baseDir + "/${url1.getUrlLayoutFilePath()}").exists());
        tabsOfUrl2BeforeDelete.each {tab ->
            def tabFile = new File(baseDir + "/web-app/${url2.name}/${tab.name}.gsp");
            assertFalse(tabFile.exists());
        }

        tabsOfUrl1BeforeDelete.each {tab ->
            def tabFile = new File(baseDir + "/web-app/${url1.name}/${tab.name}.gsp");
            if(tab.name == tabsProps[0].name)
            {
                assertTrue(tabFile.exists());
            }
            else
            {
                assertFalse(tabFile.exists());
            }
        }

        //Test if tab does not exist generate will create redirect url page  with no content
        UiTab.removeAll();
        IntegrationTestUtils.resetController(controller);
        controller.generate();
        assertEqualsXML("<Successful>UI generated successfully</Successful>", controller.response.contentAsString);
        checkGeneratedFiles();
        def urlRedirectFile = new File(baseDir + "/${url1.getUrlFilePath()}");
        assertEquals("", urlRedirectFile.getText());
        assertEquals(0, DesignerTrashFile.list().size());
    }

    public void testSaveWithRelationProperty()
    {
        def sw = new StringWriter();
        def builder = new MarkupBuilder(sw);
        def url1Props = [name: "myUrl1", designerType: "WebPage"]
        def chart1Props = [designerType: 'FlexPieChart', rootTag: "rootTag", url: "url1", pollingInterval: "10", name: "chart1", title: "title"]
        def chart2Props = [designerType: 'FlexPieChart', rootTag: "rootTag", url: "url1", pollingInterval: "10", name: "chart2", title: "title"]
        def tabsProps = [[name: "tab1", designerType: "Tab", javascriptFile: 'x.gsp']];
        builder.UiConfig {
            builder.UiElement(designerType: "WebPages") {
                builder.UiElement(url1Props) {
                    builder.UiElement(designerType: "Tabs") {
                        tabsProps.each {tab ->
                            builder.UiElement(tab) {
                                builder.UiElement(designerType: 'Layout')
                                        {
                                            builder.UiElement(designerType: 'CenterUnit', component: 'chart1', contentFile: '', gutter: '', scroll: 'false', useShim: 'false');
                                        }
                                builder.UiElement(designerType: 'Components')
                                        {
                                            builder.UiElement(chart1Props)
                                            builder.UiElement(chart2Props)
                                        }
                                builder.UiElement(designerType: 'Dialogs')
                                builder.UiElement(designerType: 'Actions')
                                        {
                                            builder.UiElement(designerType: 'RequestAction', name: "action1", url: "url1", components: "${chart1Props.name},${chart2Props.name}", condition: "true", timeout: 40)
                                                    {
                                                        builder.UiElement(designerType: 'Events', designerHidden: "true")
                                                    }
                                        }
                            }
                        }
                    }
                }
            }
        }
        UiDesignerController controller = new UiDesignerController();
        controller.params.configuration = sw.toString()
        controller.save();
        assertEqualsXML("<Successful>UI configuration saved successfully</Successful>", controller.response.contentAsString);
        def url1 = UiWebPage.get(name: url1Props.name, isActive: true);
        assertTrue(!url1.tabs.findAll {it.name == "tab1"}.isEmpty());
        def tab = url1.tabs[0];
        def tabComponents = tab.components;
        assertEquals(2, tabComponents.size());
        tabComponents = tabComponents.sort {it.name}
        UiFlexPieChart component = tabComponents[0];

        assertTrue(component instanceof UiFlexPieChart)
        assertEquals(chart1Props.rootTag, component.rootTag);
        assertEquals(chart1Props.url, component.url);
        assertEquals(new Long(chart1Props.pollingInterval), component.pollingInterval);
        assertEquals(chart1Props.name, component.name);
        assertEquals(chart1Props.title, component.title);
        assertEquals(UiCenterUnit.name, component.layoutUnit.class.name);
        UiRequestAction requestAction = UiAction.get(name: "action1", tabId: tab.id, isActive: true);
        assertEquals(2, requestAction.components.size());
    }

    public void testSaveWithErrors()
    {
        def sw = new StringWriter();
        def builder = new MarkupBuilder(sw);
        def url1Props = [name: "myUrl1", designerType: "WebPage"]
        def url2Props = [name: "myUrl2", designerType: "WebPage"]
        builder.UiConfig {
            builder.UiElement(designerType: "WebPages") {
                builder.UiElement(url1Props) {
                    builder.UiElement(designerType: "Tabs") {
                        builder.UiElement(designerType: "Tab", name: "tab1")
                    }
                }
            }
        }
        UiDesignerController controller = new UiDesignerController();
        controller.params.configuration = sw.toString()
        controller.save();
        assertEquals(1, UiWebPage.count());
        def url1BeforeTryingToSaveWithError = UiWebPage.list()[0];

        sw = new StringWriter();
        builder = new MarkupBuilder(sw);
        builder.UiConfig {
            builder.UiElement(designerType: "WebPages") {
                builder.UiElement(url1Props) {
                    builder.UiElement(designerType: "Tabs") {
                        builder.UiElement(designerType: "Tab")
                    }
                }
                builder.UiElement(url2Props) {
                }
            }
        }
        IntegrationTestUtils.resetController(controller);
        controller.params.configuration = sw.toString()
        controller.save();
        assertEquals(1, UiWebPage.count());
        assertEquals(url1BeforeTryingToSaveWithError.id, UiWebPage.list()[0].id);
        assertEquals(true, UiWebPage.list()[0].isActive);
        assertEquals(1, UiTab.count());

        def responseXml = new XmlSlurper().parseText(controller.response.contentAsString);
        assertEquals(1, responseXml.Error.size());

    }
    public void testMetaData()
    {
        UiDesignerController controller = new UiDesignerController();
        controller.metaData();
        println controller.response.contentAsString
        def responseXml = new XmlSlurper().parseText(controller.response.contentAsString);
        def components = responseXml.UiElement
        def uiDomainClasses = ApplicationHolder.application.getDomainClasses().findAll {
            if (it.clazz.name.startsWith(UiWebPage.getPackage().name))
            {
                try {
                    it.clazz.'metaData'();
                    return true;
                } catch (groovy.lang.MissingMethodException e) {}
                return false;
            }
            return false;
        }
        def componentMap = [:]
        components.each {
            componentMap[it.'@designerType'.text()] = it;
        }
        def classToBeExcluded = [UiLayoutUnit.name, UiComponent.name, UiAction.name]
        uiDomainClasses.each {grailsDomainClass ->
            def domainClass = grailsDomainClass.clazz;
            if (!classToBeExcluded.contains(domainClass.name))
            {
                def component = componentMap[StringUtils.substringAfter(domainClass.simpleName, "Ui")];
                assertNotNull("Undefined for ${StringUtils.substringAfter(domainClass.simpleName, "Ui")} in ${componentMap}", component);
            }
        }
        def urlsComponent = componentMap["WebPages"];
        assertEquals("WebPages", urlsComponent.'@designerType'.text());
        assertEquals("Web Pages", urlsComponent.'@display'.text());
        assertEquals("Web Pages.html", urlsComponent.'@help'.text());
        assertEquals(1, urlsComponent.Children.size());
        assertEquals("WebPage", urlsComponent.Children[0].Child[0].'@designerType'.text());
        assertEquals("true", urlsComponent.Children[0].Child[0].'@isMultiple'.text());
        def urlComponent = componentMap["WebPage"];
        def urlPropertyMetaData = urlComponent.Properties.Property;
        def xmlProperties = [:]
        urlPropertyMetaData.each {
            xmlProperties[it.'@name'.text()] = it;
        }
        assertEquals("name", xmlProperties["name"].'@name'.text());
        assertEquals("String", xmlProperties["name"].'@type'.text());
        assertTrue(xmlProperties["name"].'@descr'.text() != null);
        assertEquals("true", xmlProperties["name"].'@required'.text());

        def urlChildMetaData = urlComponent.Children.Child;
        def xmlChildren = [:]
        urlChildMetaData.each {
            xmlChildren[it.'@designerType'.text()] = it;
        }
        assertEquals(1, xmlChildren.size());
        assertEquals("Tabs", xmlChildren["Tabs"].'@designerType'.text());
        assertEquals("false", xmlChildren["Tabs"].'@isMultiple'.text());

        def tabsComponent = componentMap["Tabs"];
        def tabsChildMetaData = tabsComponent.Children.Child;
        def tabsXmlChildren = [:]
        tabsChildMetaData.each {
            tabsXmlChildren[it.'@designerType'.text()] = it;
        }
        assertEquals(1, tabsXmlChildren.size());
        assertEquals("Tab", tabsXmlChildren["Tab"].'@designerType'.text());
        assertEquals("true", tabsXmlChildren["Tab"].'@isMultiple'.text());

        //Test will not send information about components whose meta data does not have designerType
        assertNull(componentMap["Component"])
        assertNull(componentMap["Action"])
        assertNull(componentMap["LayoutUnit"])
        assertNull(componentMap[""])

    }

    public void testUiDesignerControllerCachesTemplates()
    {
        def sw = new StringWriter();
        def builder = new MarkupBuilder(sw);
        def url1Props = [name: "myUrl1", designerType: "WebPage", id: ""]
        builder.UiConfig {
            builder.UiElement(designerType: "WebPages") {
                builder.UiElement(url1Props) {
                }
            }
        }
        UiDesignerController controller = new UiDesignerController();
        controller.params.configuration = sw.toString()
        controller.save();
        def url1 = UiWebPage.get(name: url1Props.name, isActive: true);
        assertNotNull(url1);
        assertEqualsXML("<Successful>UI configuration saved successfully</Successful>", controller.response.contentAsString);

        File uiUrlTemplate = new File("${System.getProperty("base.dir")}/${UiDesignerController.TEMPLATES_DIRECTORY}/WebPage.gsp");
        assertTrue(uiUrlTemplate.exists());
        def originalTemplate = uiUrlTemplate.getText();
        //test generate gsp files
        deleteGeneratedFiles();
        IntegrationTestUtils.resetController(controller);
        controller.generate();
        assertEqualsXML("<Successful>UI generated successfully</Successful>", controller.response.contentAsString);

        File generatedFile = new File("${System.getProperty("base.dir")}/grails-app/views/layouts/" + url1.name + "Layout.gsp");
        String generatedUrlFileContent = generatedFile.getText();

        uiUrlTemplate.setText("contentChanged");
        try
        {
            IntegrationTestUtils.resetController(controller);
            controller.generate();
            String generatedContentAfterTemplateChange = generatedFile.getText();
            assertEquals(generatedUrlFileContent, generatedContentAfterTemplateChange);

            //After reloading templates new content should be generated
            IntegrationTestUtils.resetController(controller);
            controller.reloadTemplates();
            assertEqualsXML("<Successful>Templates reloaded successfully</Successful>", controller.response.contentAsString);
            IntegrationTestUtils.resetController(controller);
            controller.generate();
            String textAfterReload = generatedFile.getText();
            assertEquals("contentChanged", textAfterReload);

            //if there are some errors in templates reload will not load templates
            uiUrlTemplate.setText("\${");
            IntegrationTestUtils.resetController(controller);
            controller.reloadTemplates();
            assertTrue(controller.response.contentAsString.indexOf("<Errors") >= 0);

            IntegrationTestUtils.resetController(controller);
            controller.generate();
            textAfterReload = generatedFile.getText();
            assertEquals("Since template could not be reloaded it should not change", "contentChanged", textAfterReload);

        } finally {
            uiUrlTemplate.setText(originalTemplate);
            IntegrationTestUtils.resetController(controller);
            controller.reloadTemplates();
        }

    }

    public void testGetHelpContent()
    {
        //The help content is html and it may include invalid characters for xml
        //These should be escaped
        String helpContent1 = "<This is a help file.>&";
        String helpContent2 = "<This is a help file.>&2";
        def helpFile1 = new File("${System.getProperty("base.dir")}/$UiDesignerController.HELP_FILE_DIRECTORY/TrialHelp1.html");
        def helpFile2 = new File("${System.getProperty("base.dir")}/$UiDesignerController.HELP_FILE_DIRECTORY/TrialHelp2.html");
        helpFile1.parentFile.mkdirs();
        helpFile1.setText(helpContent1);
        helpFile2.setText(helpContent2);

        UiDesignerController controller = new UiDesignerController();
        controller.help();

        def helpContentNode = new XmlParser().parseText(controller.response.contentAsString);
        assertEquals("Helps", helpContentNode.name());
        def helpItems = helpContentNode.Help;
        def helpFile1Node = helpItems.find {it.attributes()["id"] == helpFile1.getName()};
        assertEquals(helpContent1, helpFile1Node.text());

        def helpFile2Node = helpItems.find {it.attributes()["id"] == helpFile2.getName()};
        assertEquals(helpContent2, helpFile2Node.text());

        //        HELP_FILE_DIRECTORY
    }

    def checkGeneratedFiles()
    {
        def baseDir = System.getProperty("base.dir");
        UiWebPage.list().each {url ->
            def urlLayoutFile = new File(baseDir + "/${url.getUrlLayoutFilePath()}");
            assertTrue(urlLayoutFile.exists());
            def urlRedirectFile = new File(baseDir + "/${url.getUrlFilePath()}");
            assertTrue(urlRedirectFile.exists());
            url.tabs.each {tab ->
                def url1WebAppDirectoryFile = new File(baseDir + "/${tab.getTabFilePath()}");
                assertTrue(url1WebAppDirectoryFile.exists());
            }
        }
    }
    def deleteGeneratedFiles()
    {
        def baseDir = System.getProperty("base.dir");
        UiWebPage.list().each {url ->
            def urlLayoutFile = new File(baseDir + "/${url.getUrlLayoutFilePath()}");
            urlLayoutFile.delete();
            FileUtils.deleteDirectory(new File(baseDir + "/web-app/${url.name}"));
            new File(baseDir + "/web-app/${url.name}.gsp").delete();
        }
    }

}