/* 
* All content copyright (C) 2004-2008 iFountain, LLC., except as may otherwise be
* noted in a separate copyright notice. All rights reserved.
* This file is part of RapidCMDB.
*
* RapidCMDB is free software; you can redistribute it and/or modify
* it under the terms version 2 of the GNU General Public License as
* published by the Free Software Foundation. This program is distributed
* in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
* even the implied warranty of MERCHANTABILITY or FITNESS FOR A
* PARTICULAR PURPOSE. See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
* USA.
*/
YAHOO.rapidjs.component.PopUpWindow = function(rapidWindow, config){
	this.rapidWindow = rapidWindow;
	this.panel = this.rapidWindow.panel;
	YAHOO.ext.util.Config.apply(this, config, {id:"AutoGeneratedDialogId_"+YAHOO.rapidjs.Components.length});
	this.container = YAHOO.ext.DomHelper.append(document.body, {tag:'div'});
	this.dialog = new YAHOO.ext.LayoutDialog(this.container, { 
            modal: this.modal,
            width:this.width||100,
            height:this.height||100,
            shadow:this.shadow,
            minWidth:this.minWidth||100,
            minHeight:this.minHeight||100,
            syncHeightBeforeShow: true,
            title: this.title,
            shim: this.shim,
            x:this.x,
            y:this.y,
            resizable: true,
            autoScroll: this.autoScroll,
            center:{
                tabPosition: 'top',
                autoScroll:true
            }
    });
    this.layout = this.dialog.getLayout();
    this.layout.beginUpdate();
    this.layout.add('center',this.panel);
    this.layout.endUpdate();
    var toolsLocation = this.layout.getRegion('center').tools.dom;
    YAHOO.util.Dom.setStyle(this.layout.getRegion('center').tools.dom, "right", "27px");
    this.dialog.el.dom.appendChild(toolsLocation);
    this.dialog.addListener('hide', this.handleHide, this,true);
    
    if(this.dialog.draggable !== false)
    {
	    if (!this.dialog.proxyDrag) {
	        var dd = new YAHOO.util.DD(this.dialog.el.dom.id, 'WindowDrag');
	    }
	    else {
	        var dd = new YAHOO.util.DDProxy(this.dialog.el.dom.id, 'WindowDrag', {dragElId: this.dialog.proxy.id});
	    }
	    dd.setHandleElId(toolsLocation.id);
	    dd.endDrag = this.dialog.endMove.createDelegate(this.dialog);
	    dd.startDrag = this.dialog.startMove.createDelegate(this.dialog);
	    dd.onDrag = this.dialog.onDrag.createDelegate(this.dialog);
	    this.dialog.dd = dd;
    }
    
    if(this.id)
    	YAHOO.rapidjs.Components[this.id] = this;
};

YAHOO.rapidjs.component.PopUpWindow.prototype = {
	show: function(){
		this.layout.setVisibleState(true);
		this.dialog.show();
	}, 
	
	hide: function(){
		this.dialog.hide();
	}, 
	handleHide: function(){
		this.layout.setVisibleState(false);
	}, 
	
	setContextMenuContent: function(node, params, dynamicTitleAtt)
	{
		this.rapidWindow.setContextMenuContent(node, params, dynamicTitleAtt, true);
		if(this.rapidWindow.dynamicTitle == true){
			var title = this.rapidWindow.titlePrefix;
			var titleAtt = node[dynamicTitleAtt];
			title = title + " " + titleAtt;
			this.dialog.setTitle(title)
		}
		if(this.isVisible() != true){
			this.show();
		}
	}, 
	setFocusedContent: function(node, params, dynamicTitleAtt)
	{
		if(this.isVisible() == true){
			this.rapidWindow.setFocusedContent(node, params, dynamicTitleAtt, true);
			if(this.rapidWindow.dynamicTitle == true){
				var title = this.rapidWindow.titlePrefix;
				var titleAtt = node.getAttribute(dynamicTitleAtt);
				title = title + " " + titleAtt;
				this.dialog.setTitle(title)
			}
		}
	}, 
	
	setLinked: function(isLinked){
		this.rapidWindow.setLinked(isLinked);
	}, 
	
	isVisible : function(){
		return this.dialog.isVisible();
	}
};