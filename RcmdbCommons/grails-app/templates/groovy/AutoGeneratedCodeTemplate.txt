
    //AUTO_GENERATED_CODE

    static searchable = {
        except = ${model.transientProps};
    <%
        if(model.indexName != null)
        {
    %>
        subIndex "${model.indexName}"
    <%
        }
    %>
    <%
        if(model.storageType != null)
        {
    %>
        storageType "${model.storageType}"
    <%
        }
    %>
    };
    static datasources = ${model.datasourceConfiguration}

    <%
        model.propertyList.each{

    %>
    ${it.type} $it.name ${it.defaultValue != null?it.defaultValue instanceof List?"=[]":"="+it.defaultValue:""};
    <%
        }
    %>
    <%

        if(model.relations.isEmpty())
        {
    %>
    static relations = [:]    
    <%
        }
        else
        {
    %>
    static relations = [
    <%
            def started = false;
            model.relations.each{relName, relConfig->
    %>
        ${started?",":""}${relName}:[type:${relConfig.type}, reverseName:"${relConfig.reverseName}", isMany:${relConfig.isMany?"true":"false"}]
    <%
                started = true;
            }
    %>
    ]
    <%
        }
    %>
    static constraints={
    <%
        model.constraints.each{key, value->
            if(!value.isEmpty())
            {
                def buf = new StringBuffer("$key(");
                value.each{constKey, constValue->
                    buf.append("$constKey:");
                    if(constValue instanceof String)
                    {
                        buf.append('"$constValue",');
                    }
                    else
                    {
                        buf.append("$constValue,");
                    }
                }
                if(buf.charAt(buf.length()-1) == ',')
                {
                   print buf.substring(0, buf.length()-1) + ")";
                }
                else
                {
                    print buf.toString() + ")";
                }
     %>
        
     <%
            }
        }

    %>
    }

    static propertyConfiguration= ${model.propertyConfigurations}
    static transients = ${model.transientProps};
    <%
    if(model.masterDatasource)
    {
    %>
    public String toString()
    {
    <%
        def strBuffer = new StringBuffer("\t");
        strBuffer.append('return "\${getClass().getName()}[')
        def datsourceKeys = new ArrayList(model.masterDatasource.keys.keySet());
        if(!datsourceKeys.isEmpty())
        {
            Collections.sort (datsourceKeys);
            datsourceKeys.each{key->
                strBuffer.append(key).append(":\${getProperty(\"").append(key).append("\")}, ");
            }
            strBuffer = strBuffer.substring(0, strBuffer.length()-2);
        }
        strBuffer += ']";';
        print strBuffer;
    %>
    }
    <%
    }
    %>
    public boolean equals(Object obj) {
        return obj.id == this.id;
    }
    //AUTO_GENERATED_CODE